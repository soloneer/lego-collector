name: Daily Data Sync

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm run install:all

    - name: Download latest CSV data
      run: npm run fetch-data
      env:
        CSV_SOURCE_URL: ${{ secrets.CSV_SOURCE_URL }}

    - name: Configure database connection for IPv4
      run: |
        echo "Configuring database connection for GitHub Actions IPv4 compatibility..."
        
        # Extract database details from the original DATABASE_URL
        DB_HOST=$(echo "$DATABASE_URL" | sed -n 's/.*@\([^:]*\):.*/\1/p')
        DB_PASSWORD=$(echo "$DATABASE_URL" | sed -n 's/.*postgres:\([^@]*\)@.*/\1/p')
        
        # Try to use Supabase's IPv4-compatible connection pooler endpoint
        if [[ "$DB_HOST" == *"supabase.co" ]]; then
          # Extract project reference from hostname
          PROJECT_REF=$(echo "$DB_HOST" | sed 's/^db\.\([^.]*\)\.supabase\.co$/\1/')
          POOLER_HOST="aws-0-us-west-1.pooler.supabase.com"
          
          echo "Using Supabase connection pooler for IPv4 compatibility"
          
          # Create IPv4-compatible DATABASE_URL using connection pooler
          IPV4_DATABASE_URL="postgresql://postgres.${PROJECT_REF}:${DB_PASSWORD}@${POOLER_HOST}:5432/postgres"
          echo "DATABASE_URL_IPV4=$IPV4_DATABASE_URL" >> $GITHUB_ENV
          echo "Successfully configured IPv4 database connection"
        else
          echo "Non-Supabase database detected, using original URL"
          echo "DATABASE_URL_IPV4=$DATABASE_URL" >> $GITHUB_ENV
        fi
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    - name: Import data to Supabase
      run: |
        # Configure Node.js for IPv4 preference
        export NODE_OPTIONS="--dns-result-order=ipv4first"
        
        # Try the import with IPv4 connection first
        echo "Attempting database import with IPv4 connection..."
        npm run import-data
      env:
        DATABASE_URL: ${{ env.DATABASE_URL_IPV4 || secrets.DATABASE_URL }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Create data sync report
      run: |
        echo "## Data Sync Report - $(date)" >> sync-report.md
        echo "" >> sync-report.md
        echo "### Files Updated:" >> sync-report.md
        ls -la data/latest/ >> sync-report.md
        echo "" >> sync-report.md
        echo "### Import Log:" >> sync-report.md
        if [ -f "data/latest/download_log.json" ]; then
          cat data/latest/download_log.json >> sync-report.md
        fi

    - name: Upload sync report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sync-report-${{ github.run_number }}
        path: sync-report.md
        retention-days: 7

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Daily Data Sync Failed - ${new Date().toDateString()}`,
            body: `The automated data sync workflow failed on ${new Date().toISOString()}. 
                   
                   Please check the workflow logs for details: ${context.payload.repository.html_url}/actions/runs/${context.runId}`,
            labels: ['automation', 'data-sync', 'bug']
          })